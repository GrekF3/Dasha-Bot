import asyncio
import logging
from datetime import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

import sqlite3

# pars_all, pars_end,pars_notend,percent integer
bd = sqlite3.connect('parsdasha.db')
cu = bd.cursor()

token = '5631292267:AAHNm0mJ6mFoc5LgDDPuItjNb3oebml3CRQ'

storage = MemoryStorage()

bot = Bot(token)

dp = Dispatcher(bot, storage=storage)

now = datetime.now()
current_time = now.strftime("%H:%M")
class Day(StatesGroup):
    new_day = State()
    pars = State()
    all_not = State()
    end = State()


async def CheckTime():
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    msg = current_time
    await bot.send_message(539057262, msg)
    while True:
        now = datetime.now()
        current_time = now.strftime("%H:%M")
        await asyncio.sleep(2)
        if current_time == "08:00":
            await Notifications()
            break
        else:
            pass



async def Notifications():
    await bot.send_message(539057262, '–û—Ç–º–µ—Ç—å—Å—è –≤–æ –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!')

@dp.message_handler(state='*', commands='db')
@dp.message_handler(Text(equals='db', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    kp = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/start')
    kp.add(btn1)
    current_state = await state.get_state()
    if current_state is None:
        return
    logging.info('Cancelling state %r', current_state)
    await state.finish()
    await message.reply('db.', reply_markup=kp)


@dp.message_handler(commands=['start'], State=None)
async def start(message: types.Message):
    kp = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ü–æ—à–ª–∞ –≤ —à–∞—Ä–∞–≥—É ‚úÖ')
    btn2 = types.KeyboardButton('–ù–µ –ø–æ—à–ª–∞ –≤ —à–∞—Ä–∞–≥—É ‚ùå')
    btn3 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìù')
    kp.add(btn1, btn2)
    kp.add(btn3)
    await Day.new_day.set()
    await message.answer('–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!', reply_markup=kp)

@dp.message_handler(state=Day.new_day)
async def day(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_day'] = message.text
    if message.text == '–ü–æ—à–ª–∞ –≤ —à–∞—Ä–∞–≥—É ‚úÖ':
        await message.answer('–£–º–Ω–∏—á–∫–∞!! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è —Ç–µ–±–µ ‚ù§Ô∏è \n–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –ø–∞—Ä —Å–µ–≥–æ–¥–Ω—è?')
        await Day.pars.set()
    elif message.text == '–ù–µ –ø–æ—à–ª–∞ –≤ —à–∞—Ä–∞–≥—É ‚ùå':
        kp = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('/start')
        kp.add(btn1)
        await message.reply('–û—Ç–¥—ã—Ö–∞–π, —Å–æ–ª–Ω—ã—à–∫–æ!', reply_markup=kp)
        await state.finish()
        await CheckTime()
    elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìù':
        cu.execute("SELECT SUM(pars_all), SUM(pars_end), SUM(pars_notend) FROM dasha")
        res = cu.fetchall()
        all_pars = res[0][0]
        end_pars = res[0][1]
        not_endpars = res[0][2]
        try:
            percent = int(end_pars) / int(all_pars)
            pos = percent * 100
        except:
            pos = '–¢—ã –ø–æ–∫–∞ –Ω–µ —Ö–æ–¥–∏–ª–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É'
        msg = (
                'üß°–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Çüß°' + '\n' +
                'üìù –í—Å–µ–≥–æ –ø–∞—Ä: ' + str(all_pars) + '\n' +
                '‚úÖ –¢—ã —Å—Ö–æ–¥–∏–ª–∞ –Ω–∞: ' + str(end_pars) + '\n' +
                '‚ùå –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞ –ø–∞—Ä: ' + str(not_endpars) + '\n' +
                '‚ö† –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π: ' + str(pos) + '%'
        )
        await bot.send_message(message.from_user.id, msg)


@dp.message_handler(state=Day.pars)
async def Updater(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['pars'] = message.text

    kp = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–Ø –≤—Å–µ –æ—Ç—Å–∏–¥–µ–ª–∞! :)')
    btn2 = types.KeyboardButton('–Ø –Ω–µ –≤—Å–µ –æ—Ç—Å–∏–¥–µ–ª–∞! :(')
    kp.add(btn1)
    kp.add(btn2)
    await message.answer('–û–≥–æ –∫–∞–∫ –º–Ω–æ–≥–æ! \n –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞—Å–∫—É—á–∞–≤—à–∏—Ö –î–∞—à: @MironManager', reply_markup=kp)
    await Day.all_not.set()


@dp.message_handler(state=Day.all_not)
async def Ender(message: types.Message, state: FSMContext):
    if message.text == '–Ø –Ω–µ –≤—Å–µ –æ—Ç—Å–∏–¥–µ–ª–∞! :(':
        await Day.end.set()
        await message.reply('–°–∫–æ–ª—å–∫–æ –ø–∞—Ä —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞?')
    else:
        kp = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton('/start')
        kp.add(btn)
        async with state.proxy() as data:
            pars = data['pars']
        await message.reply('–£–º–Ω–∏—á–∫–∞, –∫—Ä–∞—Å–∞–≤–∏—Ü–∞!', reply_markup=kp)
        msg = '–¢—ã —Å—Ö–æ–¥–∏–ª–∞ –Ω–∞: ' + pars + ' –ø–∞—Ä'
        cu.execute("INSERT INTO dasha VALUES(?,?,?)", (int(pars), int(pars), 0,))
        bd.commit()
        await bot.send_message(message.from_user.id, msg)
        await state.finish()
        await CheckTime()


@dp.message_handler(state=Day.end)
async def Math(message: types.Message, state: FSMContext):
    kp = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/start')
    kp.add(btn1)
    async with state.proxy() as data:
        data['end'] = message.text
        pars = data['pars']
    await message.reply('–û–∫–µ–π, —Å—á–∞ –ø–æ—Å—á–∏—Ç–∞–µ–º')
    par = (int(pars) - int(data['end']))
    await bot.send_message(message.from_user.id, '–°–µ–≥–æ–¥–Ω—è –±—ã–ª–æ ' + str(pars) + ' ,–Ω–æ —Ç—ã —Å—Ö–æ–¥–∏–ª–∞ –Ω–∞ ' + str(par),
                           reply_markup=kp)
    cu.execute("INSERT INTO dasha VALUES(?,?,?)", (int(pars), int(par), int(data['end'])))
    bd.commit()
    await state.finish()
    await CheckTime()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
